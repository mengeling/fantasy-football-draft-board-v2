version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: ffball-postgres
    environment:
      POSTGRES_DB: ffball_prod
      POSTGRES_USER: ffball
      POSTGRES_PASSWORD: ffball
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/setup_db.sql:/docker-entrypoint-initdb.d/setup_db.sql
    ports:
      - "5432:5432"
    networks:
      - ffball-network
    restart: unless-stopped

  # Development Database
  postgres-dev:
    image: postgres:16
    container_name: ffball-postgres-dev
    environment:
      POSTGRES_DB: ffball_dev
      POSTGRES_USER: ffball
      POSTGRES_PASSWORD: ffball
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/src/database/setup_db.sql:/docker-entrypoint-initdb.d/setup_db.sql
    ports:
      - "5433:5432"
    networks:
      - ffball-network
    restart: unless-stopped

  # Backend API (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ffball-backend
    environment:
      DATABASE_URL: postgresql://ffball:ffball@postgres:5432/ffball_prod
      RUST_LOG: info
      RUST_BACKTRACE: 1
      PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - ffball-network
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/target

  # Backend API (Development)
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ffball-backend-dev
    environment:
      DATABASE_URL: postgresql://ffball:ffball@postgres-dev:5432/ffball_dev
      RUST_LOG: info
      RUST_BACKTRACE: 1
      PORT: 8081
    ports:
      - "8081:8081"
    depends_on:
      - postgres-dev
    networks:
      - ffball-network
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/target

  # Frontend (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ffball-frontend
    ports:
      - "3000:80"
    networks:
      - ffball-network
    restart: unless-stopped

  # Frontend (Development)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ffball-frontend-dev
    ports:
      - "3001:80"
    networks:
      - ffball-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ffball-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/certbot:/var/www/certbot:ro
      - certbot_etc:/etc/letsencrypt
    depends_on:
      - backend
      - backend-dev
      - frontend
      - frontend-dev
    networks:
      - ffball-network
    restart: unless-stopped

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: ffball-certbot
    volumes:
      - ./nginx/certbot:/var/www/certbot
      - certbot_etc:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@yourdomain.com --agree-tos --no-eff-email -d yourdomain.com -d dev.yourdomain.com
    depends_on:
      - nginx
    profiles:
      - ssl

volumes:
  postgres_data:
  postgres_dev_data:
  certbot_etc:

networks:
  ffball-network:
    driver: bridge
